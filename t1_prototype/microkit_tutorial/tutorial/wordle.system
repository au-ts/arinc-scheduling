<?xml version="1.0" encoding="UTF-8"?>


<system>
<memory_region name="timer" size="0x10_000" phys_addr="0xffd0f000" />

<protection_domain name="timer">
    <program_image path="timer.elf" />
    <map mr="timer" vaddr="0x2_000_000" perms="rw" cached="false" setvar_vaddr="timer_regs" />
    <irq irq="42" id="0" trigger="edge" />
</protection_domain>

  

<protection_domain name="scheduler">
    <map mr="p1_state" vaddr="0x1_000_000" perms="rw" setvar_vaddr="p1_state" />
    <map mr="p1_attr" vaddr="0x1_001_000" perms="rw" setvar_vaddr"p1_attr" />
    <map mr="p2_state" vaddr="0x1_002_000" perms="rw" setvar_vaddr="p2_state" />
    <map mr="p2_attr" vaddr="0x1_003_000" perms="rw" setvar_vaddr"p1_attr" />
    <map mr="p3_state" vaddr="0x1_004_000" perms="rw" setvar_vaddr="p3_state" />
    <map mr="p3_attr" vaddr="0x1_005_000" perms="rw" setvar_vaddr"p1_attr" />

</protection_domain>

<!-- Partition states -->

<memory_region name="p1_state" size="0x1_000" />
<memory_region name="p1_attr" size="0x1_000" />

<memory_region name="p2_state" size="0x1_000" />
<memory_region name="p2_attr" size="0x1_000" />

<memory_region name="p3_state" size="0x1_000" />
<memory_region name="p3_attr" size="0x1_000" />

<!-- PD states -->

<memory_region name="p1_ppd_state" size="0x1_000" />
<memory_region name="p2_ppd_state" size="0x1_000" />
<memory_region name="p3_ppd_state" size="0x1_000" />

<!-- Partition PDs -->

<protection_domain name="p1_ppd" passive="true" priority="100">
    <map mr="p1_ppd_state" vaddr="0x10_001_000" perms="rw" setvar_vaddr="STATUS" />
</protection_domain>

<protection_domain name="p1_spd" passive="true" priority="99">
    <map mr="p1_state" vaddr="0x10_000_000" perms="rw" setvar_vaddr="P_STATE" />
    <map mr="p1_ppd_state" vaddr="0x10_001_000" perms="rw" setvar_vaddr="PPD_STATUS" />
</protection_domain>

<protection_domain name="p2_spd">
    <map mr="p2_state" vaddr="0x10_000_000" perms="rw" setvar_vaddr="P_STATE" />
    <map mr="p2_ppd_state" vaddr="0x10_001_000" perms="rw" setvar_vaddr="PPD_STATUS" />
</protection_domain>

<protection_domain name="p3_spd">
    <map mr="p3_state" vaddr="0x10_000_000" perms="rw" setvar_vaddr="P_STATE" />
    <map mr="p3_ppd_state" vaddr="0x10_001_000" perms="rw" setvar_vaddr="PPD_STATUS" />
</protection_domain>

<!-- Channels -->
<channel>
    <end pd="timer" id="1" />
    <end pd="scheduler" id="2" />
</channel>

<channel> 
    <end pd="p1_spd" id="1" pp="true" notify="false"/>
    <end pd="p1_ppd" id="2" />
</channel>



<!--################################Tutorial####################################-->

    <!-- Define your system here -->
    <memory_region name="uart" size="0x1_000" phys_addr="0x9_000_000"/>
    <memory_region name="client_to_serial" size="0x1000" />
    <memory_region name="serial_to_client" size="0x1000" />

    <protection_domain name="wordle_server" priority="254">
        <program_image path="wordle_server.elf" />
    </protection_domain>

    <protection_domain name="serial_server" priority="254">
        <program_image path="serial_server.elf" />
        <map mr="uart" vaddr="0x2000000" perms="rw" cached="false" setvar_vaddr="uart_base_vaddr"/>
        <map mr="serial_to_client" vaddr="0x4000000" perms="wr" setvar_vaddr="serial_to_client_vaddr"/>
        <map mr="client_to_serial" vaddr="0x4001000" perms="r" setvar_vaddr="client_to_serial_vaddr"/>
        <irq irq="33" id="1" />
    </protection_domain>

    <protection_domain name="client" priority="253" >
        <program_image path="client.elf" />
        <map mr="serial_to_client" vaddr="0x4000000" perms="r" setvar_vaddr="serial_to_client_vaddr"/>
        <map mr="client_to_serial" vaddr="0x4001000" perms="rw" setvar_vaddr="client_to_serial_vaddr"/>
    </protection_domain>

    <channel>
        <end pd="client" id="1" />
        <end pd="serial_server" id="2" />
    </channel>

    <channel>
        <end pd="client" id="2" />
        <end pd="wordle_server" id="1" />
    </channel>

    <!--
        This is what the virtual machine will use as its "RAM".
        Remember it does not know it is a VM and so  will expect a
        block of contigious memory as RAM.
    -->
    <memory_region name="guest_ram" size="0x10000000" page_size="0x200_000"
        phys_addr="0x40000000" />
    <!-- Create a memory region for the ethernet device -->
    <memory_region name="ethernet" size="0x1000" phys_addr="0xa003000" />
    <!--
        Create a memory region for the GIC vCPU, this is part of
        ARM's hardware virtualisation, I will not go into detail here,
        but it is necessary for the virtual machine to function.
    -->
    <memory_region name="gic_vcpu" size="0x1000" phys_addr="0x8040000" />

    <!-- Create a VMM protection domain -->
    <protection_domain name="vmm" priority="101">
        <program_image path="vmm.elf" />
        <!--
            Map in the virtual machine's RAM region as the VMM needs
            access to it as well for starting and setting up the VM.
        -->
        <map mr="guest_ram" vaddr="0x40000000" perms="rw"
            setvar_vaddr="guest_ram_vaddr" />
        <!--
            Create the virtual machine, the `id` is used for the
            VMM to refer to the VM. Similar to channels and IRQs
        -->
        <virtual_machine name="linux" priority="100">
            <vcpu id="0" />
            <map mr="guest_ram" vaddr="0x40000000" perms="rwx" />
            <map mr="ethernet" vaddr="0xa003000" perms="rw" cached="false" />
            <map mr="uart" vaddr="0x9000000" perms="rw" cached="false" />
            <map mr="gic_vcpu" vaddr="0x8010000" perms="rw" cached="false" />
        </virtual_machine>
        <!--
            We want the VMM to receive the ethernet interrupts, which it
            will then deliver to the VM
         -->
        <irq irq="79" id="2" trigger="edge" />
    </protection_domain>

    <channel>
        <end pd="vmm" id="1" />
        <end pd="wordle_server" id="2" />
    </channel>
</system>